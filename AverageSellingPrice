-- Write an SQL query to find the average selling price for each product. average_price should be rounded to 2 decimal places.

-- Return the result table in any order.

-- The query result format is in the following example.

-- Example 1:

-- Input: 
-- Prices table:
-- +------------+------------+------------+--------+
-- | product_id | start_date | end_date   | price  |
-- +------------+------------+------------+--------+
-- | 1          | 2019-02-17 | 2019-02-28 | 5      |
-- | 1          | 2019-03-01 | 2019-03-22 | 20     |
-- | 2          | 2019-02-01 | 2019-02-20 | 15     |
-- | 2          | 2019-02-21 | 2019-03-31 | 30     |
-- +------------+------------+------------+--------+
-- UnitsSold table:
-- +------------+---------------+-------+
-- | product_id | purchase_date | units |
-- +------------+---------------+-------+
-- | 1          | 2019-02-25    | 100   |
-- | 1          | 2019-03-01    | 15    |
-- | 2          | 2019-02-10    | 200   |
-- | 2          | 2019-03-22    | 30    |
-- +------------+---------------+-------+
-- Output: 
-- +------------+---------------+
-- | product_id | average_price |
-- +------------+---------------+
-- | 1          | 6.96          |
-- | 2          | 16.96         |
-- +------------+---------------+

-- # Write your MySQL query statement below
WITH total_price AS (
  SELECT 
    p.product_id,
    p.price, 
    u.units,
    (p.price * u.units) AS order_total
  FROM prices p
  JOIN unitssold u
    ON p.product_id = u.product_id 
  WHERE u.purchase_date BETWEEN p.start_date AND p.end_date
)
# SELECT product_id, AVG(SUM()) FROM total_price
SELECT product_id, ROUND((SUM(order_total) / SUM(units)), 2) AS average_price FROM total_price
GROUP BY product_id